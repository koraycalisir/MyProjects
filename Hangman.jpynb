{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name : koray\n",
      "\n",
      "Welcome Koray\n",
      "\n",
      "The word is an animal\n",
      "____\n",
      "|  |\n",
      "|   \n",
      "| \n",
      "|     ######\n",
      "1_Guess a letter\n",
      "2_Guess the word (1 or 2) : 1\n",
      "Enter a letter : a\n",
      "____\n",
      "|  |\n",
      "|  O\n",
      "| \n",
      "|     ######\n",
      "1_Guess a letter\n",
      "2_Guess the word (1 or 2) : 1\n",
      "Enter a letter : e\n",
      "____\n",
      "|  |\n",
      "|  O\n",
      "| \n",
      "|     #####e\n",
      "1_Guess a letter\n",
      "2_Guess the word (1 or 2) : 1\n",
      "Enter a letter : u\n",
      "____\n",
      "|  |\n",
      "|  O\n",
      "| \n",
      "|     #u###e\n",
      "1_Guess a letter\n",
      "2_Guess the word (1 or 2) : 1\n",
      "Enter a letter : g\n",
      "____\n",
      "|  |\n",
      "|  O\n",
      "|  | \n",
      "|     #u###e\n",
      "1_Guess a letter\n",
      "2_Guess the word (1 or 2) : 1\n",
      "Enter a letter : s\n",
      "____\n",
      "|  |\n",
      "|  O\n",
      "| /| \n",
      "|     #u###e\n",
      "1_Guess a letter\n",
      "2_Guess the word (1 or 2) : 1\n",
      "Enter a letter : t\n",
      "____\n",
      "|  |\n",
      "|  O\n",
      "| /| \n",
      "|     tu#t#e\n",
      "1_Guess a letter\n",
      "2_Guess the word (1 or 2) : 2\n",
      "Enter your guess : turtle\n",
      "____\n",
      "|  |\n",
      "|  O\n",
      "| /| \n",
      "|     turtle\n",
      "You Win !!\n",
      "Game finished thanks for playing\n"
     ]
    }
   ],
   "source": [
    "import random as r\n",
    "\n",
    "# body part function\n",
    "def hang_man(part):\n",
    "    if part == 0:\n",
    "        return \"____\\n|  |\\n|   \\n| \\n|    \"\n",
    "    elif part == 1:\n",
    "        return \"____\\n|  |\\n|  O\\n| \\n|    \"\n",
    "    elif part == 2:\n",
    "        return \"____\\n|  |\\n|  O\\n|  | \\n|    \"\n",
    "    elif part == 3:\n",
    "        return \"____\\n|  |\\n|  O\\n| /| \\n|    \"\n",
    "    elif part == 4:\n",
    "        return \"____\\n|  |\\n|  O\\n| /|\\ \\n|    \"\n",
    "    elif part == 5:\n",
    "        return \"____\\n|  |\\n|  O\\n| /|\\ \\n| /  \"\n",
    "    else:\n",
    "        return \"____\\n|  |\\n|  O\\n| /|\\ \\n| / \\ \"\n",
    "\n",
    "# list of words\n",
    "words = [\"cat\", \"dog\", \"lion\", \"giraffe\", \"tiger\", \"bird\", \"mouse\", \"snake\", \"elephant\", \"monkey\", \"turtle\", \"rabbit\", \"horse\"]\n",
    "\n",
    "name =  input(\"Name : \")\n",
    "wrong = 0  # keep the number of wrong answers\n",
    "word = r.choice(words) # choise a random word in words list\n",
    "close_word = \"#\"*len(word) # close_word => like ###### \n",
    "\n",
    "print(\"\\nWelcome {}\\n\".format(name.capitalize()))\n",
    "print(\"The word is an animal\")\n",
    "print(\"{} {}\".format(hang_man(wrong),close_word))\n",
    "\n",
    "# this while loop run until the wrong answers number (wrong) equals 6\n",
    "while wrong < 6:\n",
    "    selection = input(\"1_Guess a letter\\n2_Guess the word (1 or 2) : \")\n",
    "    \n",
    "    if selection == \"1\":\n",
    "        letter = input(\"Enter a letter : \")\n",
    "        \n",
    "        if letter in word:\n",
    "            \n",
    "            # Indexes of the new letter in word and open letters in close_word\n",
    "            index = [i for i in range(len(word)) if word[i]==letter or word[i]==close_word[i]]\n",
    "            # Saves the indexes in the list as open, others closed \n",
    "            close_word = \"\".join(\"#\" if i not in index else word[i] for i,j in enumerate(word))\n",
    "            \n",
    "            # if you enter correct the last letter, print \"you win\" and stop the program\n",
    "            if close_word == word:\n",
    "                print(\"{} {}\".format(hang_man(wrong),word))\n",
    "                print(\"You Win !!\")\n",
    "                break\n",
    "                \n",
    "            # if it is not last letter, just show hangman and close_word\n",
    "            else:\n",
    "                print(\"{} {}\".format(hang_man(wrong),close_word))\n",
    "\n",
    "        else:\n",
    "            wrong += 1\n",
    "            # if you dont have any chance, open the word and print \"you lost\"\n",
    "            if wrong == 6:\n",
    "                    print(\"{} {}\".format(hang_man(wrong),word))\n",
    "                    print(\"You Lost !!\")\n",
    "            else:\n",
    "                print(\"{} {}\".format(hang_man(wrong),close_word))\n",
    "\n",
    "    elif selection == \"2\":\n",
    "        predicted_word = input(\"Enter your guess : \")\n",
    "        \n",
    "        # if predicted word equal the word, you win the game and game done\n",
    "        if predicted_word == word:\n",
    "            print(\"{} {}\\n{}\".format(hang_man(wrong),word,\"You Win !!\"))\n",
    "            break\n",
    "        else:\n",
    "            wrong += 1\n",
    "            if wrong == 6:\n",
    "                print(\"{} {}\".format(hang_man(wrong),word))\n",
    "                print(\"You Lost !!\")\n",
    "            else:\n",
    "                print(\"{} {}\".format(hang_man(wrong),close_word))\n",
    "    else:\n",
    "        print(\"Wrong selection !! Try again\")\n",
    "\n",
    "print(\"Game finished thanks for playing\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
